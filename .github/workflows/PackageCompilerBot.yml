name: PackageCompilerBot
on:
  release:
    types:
      - created

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        julia-version: ['1.4']
        julia-arch: [x64]
        os: [ubuntu-latest, macOS-latest]
        exclude:
          - os: macOS-latest
            julia-arch: x86

    steps:
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
      - name: Dump job context
        env:
          JOB_CONTEXT: ${{ toJson(job) }}
        run: echo "$JOB_CONTEXT"
      - name: Dump steps context
        env:
          STEPS_CONTEXT: ${{ toJson(steps) }}
        run: echo "$STEPS_CONTEXT"
      - name: Dump runner context
        env:
          RUNNER_CONTEXT: ${{ toJson(runner) }}
        run: echo "$RUNNER_CONTEXT"
      - name: Dump strategy context
        env:
          STRATEGY_CONTEXT: ${{ toJson(strategy) }}
        run: echo "$STRATEGY_CONTEXT"
      - name: Dump matrix context
        env:
          MATRIX_CONTEXT: ${{ toJson(matrix) }}
        run: echo "$MATRIX_CONTEXT" 
      - uses: actions/checkout@v1.0.0
      - name: Get package name and form sysimage name
        id: pkg
        run: |
          REPONAME="${{ github.event.repository.name }}"
          PACKAGENAME=${REPONAME%.jl}
          echo "::set-output name=packagename::$PACKAGENAME"        
          echo "::set-output name=sysimagename::$PACKAGENAME-${{ matrix.os }}-${{ matrix.julia-arch }}-julia${{ matrix.julia-version }}.so"        
      - uses: julia-actions/setup-julia@latest
        with:
          version: ${{ matrix.julia-version }}
      - name: Install PackageCompiler
        run: julia --project -e 'using Pkg; Pkg.add("PackageCompiler");'
      - name: Generate sysimage
        run: |
          julia --project -e 'using PackageCompiler; create_sysimage(:${{ steps.pkg.outputs.packagename }}, sysimage_path="${{ steps.pkg.outputs.sysimagename }}")'    
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        with:
          upload_url: ${{ event.release.upload_url }}
          asset_path: ./${{ steps.pkg.outputs.sysimagename }}
          asset_name: ${{ steps.pkg.outputs.sysimagename }}
          asset_content_type: application/zip
